<project name="wolfnetWordPressPlugin" default="build" basedir=".">


	<property name="majorVersion" value="1.0" />
	<property name="minorVersion" value="3" />
	<property name="version" value="${majorVersion}.${minorVersion}" />

	<property file="build.properties" />

	<property name="tool.yuicompressor" value="${basedir}/.ant/yuicompressor-2.4.5.jar"  />
	<property name="tool.closure"       value="${basedir}/.ant/closure/compiler.jar" />
	<property name="tool.ant-contrib"   value="${basedir}/.ant/ant-contrib/lib/ant-contrib.jar" />
	<property name="tool.rhino"         value="${basedir}/.ant/rhino.jar" />
	<property name="tool.less"          value="${basedir}/.ant/less-rhino-1.1.5.js" />
	<property name="buildName"          value="wolfnet" />
	<property name="buildDir"           value="../${buildName}" />
	<property name="testDir"            value="../${buildName}Test" />
	<property name="dir.js"             value="js" />
	<property name="dir.css"            value="css" />
	<property name="packageDir"         value="../" />
	<property name="packageName"        value="${packageDir}${buildName}_${version}" />

	<property name="absBase"            location="${basedir}" />
	<property name="absBuild"           location="${buildDir}" />


	<!-- Define the Java Library for the AntContrib project -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${tool.ant-contrib}" />
		</classpath>
	</taskdef>


	<!-- Define the Java Library for the Closure Compiler -->
	<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask">
		<classpath>
			<pathelement location="${tool.closure}" />
		</classpath>
	</taskdef>


	<target name="compile" depends="compile-less">
	</target>


	<target name="compile-less">
		<compile-less />
	</target>


	<target name="minify" depends="minify-css,minify-javascript">
	</target>


	<target name="minify-css" depends="compile-less">
		<min-css />
	</target>


	<target name="minify-javascript">
		<min-js-closure />
	</target>


	<target name="build" depends="minify">
		<clean-for-build />

		<echo>Creating Build Directory: ${buildDir}</echo>
		<copy todir="${buildDir}">
			<fileset dir="${basedir}">
				<exclude name=".build.properties" /> <!-- Template Properties Files (does get committed) -->
				<exclude name="build.properties" /> <!-- Concrete Properties Files (does not get committed) -->
				<exclude name="build.xml" /> <!-- This file -->
				<exclude name="phpdoc.dist.xml" /> <!-- Config file for PHP Documentor -->
				<exclude name="*.bat" /> <!-- Batch files used for building the project or performing othing tasks -->
				<exclude name="LessCompilerOutput.txt" />
				<exclude name=".ant/" />
				<exclude name="**/*.less" />
				<exclude name="xml/*.xml" />
				<exclude name=".ant/" />
				<exclude name=".gitconfig" />
			</fileset>
		</copy>

	</target>


	<target name="test" depends="build">
		<clean-for-test />
		<copy todir="${testDir}">
			<fileset dir="${buildDir}" />
		</copy>
	</target>


	<target name="package" depends="build">
		<clean-for-package />
		<prep-for-package />
		<zip destfile="${packageName}.zip" compress="true">
			<zipfileset dir="${buildDir}" prefix="${buildName}" />
		</zip>
		<zip destfile="${packageName}_src.zip" compress="true">
			<zipfileset dir="${basedir}" prefix="${buildName}" />
		</zip>
	</target>


	<target name="package-build" depends="build">
		<prep-for-package />
	</target>


	<target name="package-test" depends="build">
		<clean-for-test />
		<prep-for-package />
		<copy todir="${testDir}">
			<fileset dir="${buildDir}" />
		</copy>
	</target>


	<!-- MACROS -->

	<macrodef name="clean-for-build">
		<sequential>
			<delete dir="${buildDir}" />
		</sequential>
	</macrodef>


	<macrodef name="clean-for-test">
		<sequential>
			<delete dir="${testDir}" />
		</sequential>
	</macrodef>


	<macrodef name="clean-for-package">
		<sequential>
			<delete file="${packageName}.zip" />
			<delete file="${packageName}_src.zip" />
		</sequential>
	</macrodef>


	<macrodef name="prep-for-package">
		<sequential>
			<!-- Minify Source Code -->
			<!-- Use min files instead of src files -->
			<echo>Switch to Minified Files</echo>
			<echo>Update Version Numbers</echo>
			<replace dir="${buildDir}">
				<include name="**/*.php" />
				<include name="ReadMe.txt" />
				<replacefilter token=".src.js"  value=".min.js" />
				<replacefilter token=".src.css" value=".min.css" />
				<replacefilter token="{majorVersion}" value="${majorVersion}" />
				<replacefilter token="{minorVersion}" value="${minorVersion}" />
				<replacefilter token="{X.X.X}" value="${version}" />
				<replacefilter token="{X.X.X}" value="${version}" />
			</replace>
		</sequential>
	</macrodef>


	<macrodef name="compile-less">
		<sequential>
			<!-- Compile Less Files -->
			<echo>Compiling Less Files</echo>
			<apply executable="java" parallel="false" output="${basedir}/LessCompilerOutput.txt" append="true" failonerror="true">
				<fileset dir="${basedir}/" >
					<include name="${dir.css}/**/*.less" />
					<exclude name="${dir.css}/**/*.inc.less" />
				</fileset>
				<arg line="-jar" />
				<arg path="${tool.rhino}" />
				<arg path="${tool.less}" />
				<srcfile />
				<mapper type="glob" from="*.less" to="${basedir}/*.src.css" />
				<targetfile />
				<arg line="-o"/>
			</apply>
		</sequential>
	</macrodef>


	<macrodef name="min-css">
		<!-- Minify CSS Files -->
		<sequential>
			<echo>Minifiying CSS Files</echo>
			<apply executable="java" parallel="false">
				<fileset dir="${basedir}/" >
					<include name="${dir.css}/**/*.src.css" />
					<exclude name="${dir.css}/**/*.min.css" />
				</fileset>
				<arg line="-jar" />
				<arg path="${tool.yuicompressor}" />
				<srcfile />
				<arg line="--line-break" />
				<arg line="4000" />
				<arg line="-o" />
				<mapper type="glob" from="*.src.css" to="${basedir}/*.min.css" />
				<targetfile />
			</apply>
		</sequential>
	</macrodef>


	<macrodef name="min-js">
		<!-- Minify JS Files -->
		<sequential>
			<echo>Minifiying JavaScript Files</echo>
			<apply executable="java" parallel="false">
				<fileset dir="${basedir}/">
					<include name="${dir.js}/**/*.src.js" />
					<exclude name="${dir.js}/**/*.min.js" />
				</fileset>
				<arg line="-jar" />
				<arg path="${tool.yuicompressor}" />
				<srcfile />
				<arg line="--line-break" />
				<arg line="4000" />
				<arg line="-o" />
				<mapper type="glob" from="*.src.js" to="${basedir}/*.min.js" />
				<targetfile />
			</apply>
		</sequential>
	</macrodef>


	<macrodef name="min-js-closure">
		<!-- Minify JS Files -->
		<sequential>
			<echo>Minifiying JavaScript Files</echo>
			<apply executable="java" parallel="false">
				<fileset dir="${basedir}/">
					<include name="${dir.js}/**/*.src.js" />
					<exclude name="${dir.js}/**/*.min.js" />
				</fileset>
				<arg line="-jar" />
				<arg path="${tool.closure}" />
				<arg line="--js" />
				<srcfile />
				<arg line="--js_output_file" />
				<mapper type="glob" from="*.src.js" to="${basedir}/*.min.js" />
				<targetfile />
			</apply>
		</sequential>
	</macrodef>


</project>
